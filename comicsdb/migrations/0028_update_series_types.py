# Generated by Django 5.0.7 on 2024-07-14 16:38
import contextlib
from datetime import date

from django.db import migrations

# Statuses
CANCELLED = 1
COMPLETED = 2
HIATUS = 3  # Not used in this migration, but informational
ONGOING = 4  # Database default value


def merge_cancelled_series(apps, schema_editor):
    series_type_model = apps.get_model("comicsdb", "SeriesType")
    # Old value
    try:
        cancelled = series_type_model.objects.get(name__icontains="cancelled")
    except series_type_model.DoesNotExist:
        # Bail
        return
    # New value
    single, _ = series_type_model.objects.get_or_create(name="Single Issue")

    series_model = apps.get_model("comicsdb", "Series")
    series_model.objects.filter(series_type=cancelled).update(
        series_type=single, status=CANCELLED
    )


def merge_ongoing_series(apps, schema_editor):
    series_type_model = apps.get_model("comicsdb", "SeriesType")
    # Old value
    try:
        ongoing = series_type_model.objects.get(name__icontains="ongoing")
    except series_type_model.DoesNotExist:
        # Bail
        return
    # New value
    single, _ = series_type_model.objects.get_or_create(name="Single Issue")

    series_model = apps.get_model("comicsdb", "Series")
    series_model.objects.filter(series_type=ongoing).update(series_type=single)


def update_complete_series_status(apps, schema_editor):
    series_type_model = apps.get_model("comicsdb", "SeriesType")
    series_model = apps.get_model("comicsdb", "Series")

    # Series Types to update
    series_types = (
        series_type_model.objects.filter(name__icontains="annual")
        | series_type_model.objects.filter(name__icontains="graphic")
        | series_type_model.objects.filter(name="One-Shot")
        | series_type_model.objects.filter(name="Hard Cover")
        | series_type_model.objects.filter(name="Trade Paperback")
    )

    # Update series status in bulk
    series_model.objects.filter(series_type__in=series_types).exclude(status=COMPLETED).update(
        status=COMPLETED
    )


def update_limited_and_digital_series(apps, schema_editor):
    today = date.today()
    series_type_model = apps.get_model("comicsdb", "SeriesType")
    series_type_lst = []
    with contextlib.suppress(series_type_model.DoesNotExist):
        limited = series_type_model.objects.get(name__icontains="limited")
        series_type_lst.append(limited)

    with contextlib.suppress(series_type_model.DoesNotExist):
        digital = series_type_model.objects.get(name__icontains="digital")
        series_type_lst.append(digital)

    if not series_type_lst:
        return

    series_model = apps.get_model("comicsdb", "Series")

    series_to_update = []
    for item in series_type_lst:
        for row in series_model.objects.filter(series_type=item).prefetch_related("issues"):
            if row.issues.last().cover_date < today:
                row.status = COMPLETED
                series_to_update.append(row)
        series_model.objects.bulk_update(series_to_update, ["status"], 500)


class Migration(migrations.Migration):
    atomic = False

    dependencies = [
        ("comicsdb", "0027_series_status"),
    ]

    operations = [
        migrations.RunPython(merge_cancelled_series),
        migrations.RunPython(merge_ongoing_series),
        migrations.RunPython(update_complete_series_status),
        migrations.RunPython(update_limited_and_digital_series),
    ]
